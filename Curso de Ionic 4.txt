Curso de Ionic 4

Pasos:
1.- npm install -g ionic
2.- ionic start
3.- nombre
4.- blank
5.- Gradle instalar
	Con Chocolatey instrucciones en youtube.
6.- Java SDK
7.- Android Studio

Extensiones de Visual Studio Code:

Visual Studio Code - Extensions.pdf
1. .jshintrc Generator
2. AB HTML Formatter
3. Angular 7 Snippets
4. Angular Language Service
5. Angular2-inline
6. Auto Close Tag
7. Bootstrap 4, Font Awesome 4
8. Gist Extension
9. HTML CSS Support
10. Ionic 4 snippets
11. JavaScript ( ES6 ) code snippets
12. jshint
13. JSON to TS
14. Material Icon Theme
15. MySQL-inline-decorator
16. Prettier - Code formatter
17. PWA Tools
18. Terminal
19. TSLint
20. TypeScript Importer




1.- Inicio del Proyecto - Componentes
	1.- ionic start nombre [aplicacion] blank

1.2 Cambiado la pantalla Principal
	Eliminaremos Home
	Crearemos un componente
	Creamos una pagina 
		ionic g [nombre] pages/inicio --dry-run
		*nota:
		--dry-run solo muestra lo que el comando usado va realizar solo es un postvisualización.
		
		Al crear una pagina se agreaga un PATH automaticamente en app-routing.modules.ts

1.3 Navegar entre pantallas
	Crearemos un pagina nueva llama "alert":
	ionic g page pages/alert --spec=false
	*nota
		se unsa --spec=false para que no salga el archivo de prueba
	También se creara una página llamada "action-sheet":
	ionic g page pages/action-sheet --spec=false

	Iniciamos en la pagina de Inicio
		Creamos un Botón
			<ion-button>Alert</ion-button>
			<ion-button>Action Sheet</ion-button>
		
		Y agregamos la directiva o componente routerLink="/alert" de esta manera:
		<ion-button routerLink="/alert">Alert</ion-button>
    	<ion-button routerLink="/action-sheet">Action Sheet</ion-button>

1.4 Back Button - Botón para regresar a la página anterior
	Vamos a crear el botón backbutton
	<ion-header>
		<ion-toolbar>
			<ion-buttons>
				<ion-back-button>
					
				</ion-back-button>
			</ion-buttons>
			<ion-title>Alert</ion-title>
		</ion-toolbar>
	</ion-header>	

	Para alinear los botones con el titulo de la página debemos de usar slot="start"

	<ion-header>
		<ion-toolbar>
			<ion-buttons slot="start">
				<ion-back-button >
				</ion-back-button>
			</ion-buttons>
			<ion-title>alert</ion-title>
		</ion-toolbar>
	</ion-header>

	Vamos a utilizar la directiva o componente defaultHref="/" para que siempre se ve el boton sin necesidad de llegar a la página desde el Inicio o de otro lugar sin generar una historia de "back"

	<ion-header>
		<ion-toolbar>
			<ion-buttons slot="start">
				<ion-back-button defaultHref="/">

				</ion-back-button>
			</ion-buttons>
			<ion-title>alert</ion-title>
		</ion-toolbar>
	</ion-header>

	Podemos agregar texto que deseemos:

	La documentación esta en este enlace:
	https://ionicframework.com/docs/api/back-button

1.5 Modulos de Componentes - Header Todo esto es para agrupar todos los componentes de la aplicación
	vamos a generar el modulo componentes
		ionic g module components
	Ahora vamos a crear un componente dentro de la carpeta principal del modulo components
		ionic g c components/header --spec=false
		o
		ionic g components components/header --spec=false

		esto automaticamente debería de agreagarlo en components.module.ts si no lo hace debemos de agregar el "HeaderComponent" en este caso así:

		@NgModule({
			declarations: [HeaderComponent],
			imports: [
				CommonModule
			]
		})
	Ahora exportaremos para que se pueda usar fuera de este modulo;
		exports:[
			HeaderComponent
		],

	Quedaría así:
		import { NgModule } from '@angular/core';
		import { CommonModule } from '@angular/common';
		import { HeaderComponent } from './header/header.component';

		@NgModule({
		declarations: [
			HeaderComponent
		],
		exports:[
			HeaderComponent
		],
		imports: [
			CommonModule
		]
		})
		export class ComponentsModule { }

	Ahora declaramos en app.module.ts y también en la page.module.ts de la página
		@NgModule({
		declarations: [AppComponent],
		entryComponents: [],
		imports: [
			BrowserModule, 
			IonicModule.forRoot(), 
			AppRoutingModule,
			ComponentsModule //Este es el que se agrego y debe agregarse en las paginas que lo necesiten
		],
		providers: [
			StatusBar,
			SplashScreen,
			{ provide: RouteReuseStrategy, useClass: IonicRouteStrategy }
		],
		bootstrap: [AppComponent]
		})
	Nos aseguramos que lo importe arriba:
	import { ComponentsModule } from './components/components.module';


	Ahora vamos a modificar el header.components.html para que se vea en todas las paginas pero para que este archivo pueda utilizar elementos, etiquetas etc... de IONIC necesitamos importar IonicModule dentro del archivo: components.module.ts

	@NgModule({
		declarations: [
			HeaderComponent
		],
		exports:[
			HeaderComponent
		],
		imports: [
			CommonModule,
			IonicModule
		]
		})
		export class ComponentsModule { }
	
	Para poder recibir el titulo dinamico por página en el header vamos a ralizar lo siguiente:

	@Input titulo:string;


	Quedaría:
	import { Component, OnInit, Input } from '@angular/core';

	@Component({
	selector: 'app-header',
	templateUrl: './header.component.html',
	styleUrls: ['./header.component.scss'],
	})
	export class HeaderComponent implements OnInit {

	@Input() titulo: string;
	
	constructor() { }

	ngOnInit() {}

	}

1.6 ION List listas en Ionic
	Formato de una lista
	<ion-list>
        <ion-item>
            <ion-label>Alert</ion-label>
        </ion-item>
    </ion-list>

	iconos (https://ionicons.com/)

	Vamos agregar "detail" para que se vea una flecha de referencia y ek routerlink
	<ion-list>
        <ion-item routerLink="/alert" detail>
            <ion-label >Alert</ion-label>
        </ion-item>
    </ion-list>

	Ahora haremos un arreglo de componentes :

	Interface (https://desarrolloweb.com/articulos/definicion-interfaces-typescript.html)
	Técnicamente, las interfaces son un mecanismo de la programación orientada a objetos que trata de suplir la carencia de herencia múltiple. La mayoría de los lenguajes que implementan la orientación a objetos no ofrecen la posibilidad de definir una clase que extienda varias clases a la vez y sin embargo a veces es deseable. Ahí es donde entran las interfaces. 
	
	Por este motivo, se dice que las interfaces son como un contrato, en el que se especifica las cosas que debe contener una clase para que pueda implementar una interfaz o cumplir el contrato declarado por esa interfaz. 

	Primero creamos una interface llamada Componente en inicio.page.ts y agregamos lo siguiente:

		interface Componente{
			icon: string;
			name: string;
			redirectTo: string; 

		}

	Luego agregamos los componentes:
		componentes: Componente[] = [
		{
		icon: 'american-football',
		name: 'action-sheet',
		redirectTo: '/action-sheet'    
		},
		{
		icon: 'appstore',
		name: 'Alert',
		redirectTo: '/alert'    
		}
		];
	Quedaría de esta manera:
		export class InicioPage implements OnInit {

		ItemsArray: ItemIsudos[] = [
			{
			icon: 'beer',
			name: 'action-sheet',
			redirectTo: '/action-sheet'    
			},
			{
			icon: 'alert',
			name: 'Alert',
			redirectTo: '/alert'    
			}
		];
		constructor() { }

		ngOnInit() {
		}

		}

		interface ItemIsudos{
		icon: string;
		name: string;
		redirectTo: string; 

		}

	Directiva ngFor (https://desarrolloweb.com/articulos/directiva-ngfor-angular2.html)
	Que es la directiva ngFor, es capaz de hacer una repetición de elementos dentro de la página. Esta repetición nos permite recorrer una estructura de array y para cada uno de sus elementos replicar una cantidad de elementos en el DOM. 

	Estamos obligados a crear de antemano un array con datos, que deben ser enviados a la vista, para que ya en el HTML se pueda realizar esa repetición

	Ahora que estamos listos para agregar un *ngFor
	Ejemplo
	*ngFor="let cualquiertexto of nombredelcomponentes" [routerLink]="cualquiertexto.componentedelarray"

	Quedaría:
	<ion-item *ngFor="let items of ItemsArray" [routerLink]="items.redirectTo" detail>
            <ion-icon [name]="items.icon"></ion-icon>
            <ion-label>{{items.name}}</ion-label>
        </ion-item>


-------------------------------------------------
02- ion-action sheet
	Crearemos un boton con color Primary y ancho completo

	<ion-button expand="full" color="primary">
        Mostrar Action Sheet
    </ion-button>

	Ahora importaremos el servicio ActionSheetController en el constructor de action-sheet.page.ts 
	
	import { ActionSheetController } from '@ionic/angular'; o se importa automaticamente..

	Ahora lo agregaremos al constructor con el nombre "actionSheetCtrl" pero puede llamarse como se desee tomando en cuenta que sera el mismo nombre del componente con el nombre completo de la clase "ActionSheetController"

	constructor(private actionSheetCtrl:ActionSheetController ) { }

	quedaría así 

	import { Component, OnInit } from '@angular/core';
	import { ActionSheetController } from '@ionic/angular';

	@Component({
	selector: 'app-action-sheet',
	templateUrl: './action-sheet.page.html',
	styleUrls: ['./action-sheet.page.scss'],
	})
	export class ActionSheetPage implements OnInit {

	constructor(private actionSheetCtrl:ActionSheetController ) { }

	ngOnInit() {
	}
	}

	Ahora copiamos el ejemplo de ActionSheetController:

	async presentActionSheet() {
	const actionSheet = await this.actionSheetCtrl.create({
	header: 'Albums',
	backdropDismiss: false,
	buttons: [{
		text: 'Delete',
		role: 'destructive',
		icon: 'trash',
		cssClass: 'rojo',
		handler: () => {
		console.log('Delete clicked');
		}
	}, {
		text: 'Share',
		icon: 'share',
		handler: () => {
		console.log('Share clicked');
		}
	}, {
		text: 'Play (open modal)',
		icon: 'arrow-dropright-circle',
		handler: () => {
		console.log('Play clicked');
		}
	}, {
		text: 'Favorite',
		icon: 'heart',
		handler: () => {
		console.log('Favorite clicked');
		}
	}, {
		text: 'Cancel',
		icon: 'close',
		role: 'cancel',
		handler: () => {
		console.log('Cancel clicked');
		}
	}]
	});
	await actionSheet.present();
	}

	y  Usaremos backdropDismiss: false, para que obligue al usuario a usar una opción del ActionSheet
	header: 'Albums',
      backdropDismiss: false,
      buttons: [{
        text: 'Delete',
        role: 'destructive',
        icon: 'trash',
        handler: () => {
          console.log('Delete clicked');
        }
      }

	Cambiar color de los botones del ActionSheet y usaremos "cssClass"
	header: 'Albums',
      backdropDismiss: false,
      buttons: [{
        text: 'Delete',
        role: 'destructive',
        icon: 'trash',
        cssClass: 'rojo',
        handler: () => {
          console.log('Delete clicked');
        }
      }

	quedaría de esta forma:
		import { Component, OnInit } from '@angular/core';
		import { ActionSheetController } from '@ionic/angular';

		@Component({
		selector: 'app-action-sheet',
		templateUrl: './action-sheet.page.html',
		styleUrls: ['./action-sheet.page.scss'],
		})
		export class ActionSheetPage implements OnInit {

		constructor(private actionSheetCtrl:ActionSheetController ) { }

		ngOnInit() {
		}
		async presentActionSheet() {
			const actionSheet = await this.actionSheetCtrl.create({
			header: 'Albums',
			backdropDismiss: false,
			buttons: [{
				text: 'Delete',
				role: 'destructive',
				icon: 'trash',
				cssClass: 'rojo',
				handler: () => {
				console.log('Delete clicked');
				}
			}, {
				text: 'Share',
				icon: 'share',
				handler: () => {
				console.log('Share clicked');
				}
			}, {
				text: 'Play (open modal)',
				icon: 'arrow-dropright-circle',
				handler: () => {
				console.log('Play clicked');
				}
			}, {
				text: 'Favorite',
				icon: 'heart',
				handler: () => {
				console.log('Favorite clicked');
				}
			}, {
				text: 'Cancel',
				icon: 'close',
				role: 'cancel',
				handler: () => {
				console.log('Cancel clicked');
				}
			}]
			});
			await actionSheet.present();
			}
		}

	y agregaremos la clase a global.scss para que puedan verse los cambios reflejados:

	.rojo span,
	.rojo .sc-ion-action-sheet-md {
		color: red !important;
	}

	handler sirve para disparar lo que necesitamos hacer al ejecutar la acción.
 	
	 async lo que dice que este metodo regresa una promesa que ejecuta el código de fomar asincrona.

	 backdropDismiss: false : para que obligue al usuario a usar una opción del ActionSheet

-------------------------------------------------
03- ion-alert